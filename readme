## Goals Chasing – React Native (Expo) App

Goals Chasing is a mobile app built with React Native and Expo to help users track tasks, focus with a countdown timer, visualize progress over time, and manage their account. It uses Firebase for authentication, Firestore for data, Firebase Storage for profile images, and Expo Notifications for task reminders.

### Key Features
- **Authentication**: Email/password sign up and login via Firebase Auth.
- **Tasks**: Create tasks with categories/icons, optional time reminder, and mark them as completed.
- **Reminders**: Local push notifications scheduled for tasks with future reminder times.
- **Timer**: Wheel-based hours/minutes/seconds picker with start, pause, and stop.
- **Statistics**: Line chart of completed tasks per month and quick totals (completed vs total).
- **History**: Scrollable list of completed tasks with created/completed dates.
- **Account**: View and update profile picture, change display name, change email and password, and logout.
- **Bottom Navigation**: Quick access to Tasks, Timer, Statistics, and Account.

### Tech Stack
- React Native 0.74, React 18
- Expo SDK 51 (expo, expo-notifications, expo-font, expo-image-picker, etc.)
- React Navigation (stack navigator)
- Firebase v9 modular SDK (Auth, Firestore), plus compat storage for image upload
- Charts via `react-native-chart-kit`

### App Structure
- `App.js`: Navigation container and stack; loads fonts; observes Firebase auth state; registers notifications; wires screens.
- `screens/`
  - `login.js`, `Register.js`: Auth screens.
  - `tasks.js`: Task list with add modal.
  - `timer.js`: Countdown timer screen.
  - `statistics.js`: Chart + totals + history.
  - `account.js`: Profile data, image upload, change name/email/password, logout.
- `components/`
  - `navbar.js`: Bottom nav bar.
  - `settask.js`: Add task modal (name, icon, reminder date/time).
  - `taskcomponent.js`: Live list of active tasks with complete/edit.
  - `edittask.js`: Edit/Delete task modal.
  - `editsinfo.js`: Change username.
  - `security.js`: Change email/password with re-auth.
  - `taskshistories.js`: Completed tasks list.
  - `notification.js`: Expo Notifications registration and scheduling from Firestore.
- `database/firebaseconfig.js`: Firebase initialization and re-exports.
- `app.json`: Expo project config, Android package, icons, notifications, fonts.
- `eas.json`: EAS Build profiles.

### Data Model (Firestore)
- Collection `users/{uid}` (document):
  - `username: string`
  - `email: string`
  - `profilePicture?: string` (download URL)
  - `totaltasks: number`
  - `completedtasks: number`
- Subcollection `users/{uid}/tasks/{taskId}` (document):
  - `taskName: string`
  - `icon: { name: string, url: string }`
  - `completed: boolean`
  - `createdAt: Timestamp | Date`
  - `completedAt?: Timestamp | Date`
  - `reminderDate?: Timestamp | Date`

Notes:
- The app uses server-like timestamps from `new Date()`; Firestore stores `Timestamp`. Code handles `.toDate()` when present.
- Totals (`totaltasks`, `completedtasks`) are maintained on the user doc when creating/completing/deleting tasks.

### Notifications
- Expo Notifications are requested at startup (`registerForPushNotificationsAsync`).
- `setupTaskNotifications(currentUser)` listens to future-dated tasks and schedules local notifications on-device using `Notifications.scheduleNotificationAsync`.
- Notification icon/color are configured in `app.json` plugins.

### Prerequisites
- Node.js 18+
- Yarn or npm
- Expo CLI (`npm i -g expo-cli`) or use `npx expo` with scripts
- Firebase project with Web app enabled

### Local Setup
1) Install dependencies:
```bash
npm install
# or
yarn
```

2) Configure Firebase:
- Update the credentials in `database/firebaseconfig.js` with your Firebase project values (`apiKey`, `authDomain`, etc.).
- Ensure Firestore and Authentication (Email/Password) are enabled.
- For profile images, Firebase Storage must be enabled. The app uses compat storage (`firebase/compat/storage`).

3) Expo configuration:
- `app.json` includes Android package and `google-services.json` reference. If you use a different Firebase project, replace `google-services.json` in the project root and update `android.package`.
- Notifications use the EAS project ID in `app.json.extra.eas.projectId`. If you fork, set your own EAS project or remove token retrieval until you configure it.

4) Run the app in development:
```bash
npm run start
# press a to run on Android emulator/device, i for iOS simulator (macOS), w for web
```

### Build
- EAS build profiles are defined in `eas.json`.
```bash
# Login to Expo and initialize if needed
eas login
eas init

# Android preview APK
eas build -p android --profile preview
```

### Usage Flow
1) Register a new account or log in.
2) Add tasks from the Tasks screen; optionally set a reminder time and select an icon.
3) Use the Timer for focused sessions (independent of tasks).
4) Mark tasks as done or edit/delete them.
5) View progress in Statistics and History.
6) Update profile photo and security settings in Account.

### Environment and Security
- Do not commit real API keys for production apps. Consider using environment variables or runtime config.
- Firestore security rules should restrict reads/writes to the authenticated user’s own documents.
- The app currently initializes Firebase compat storage for image uploads; ensure rules require auth.

### Troubleshooting
- Fonts not appearing: Ensure Rubik fonts are included and loaded via `@expo-google-fonts/rubik` and `useFonts` in `App.js`.
- Firestore permission errors: Check Firebase security rules and that the user is authenticated.
- Notifications not firing:
  - Verify permissions granted.
  - Only future `reminderDate` values are scheduled.
  - Physical device required for local notifications in many cases.
- Android build failures: Ensure `google-services.json` matches `android.package` in `app.json`.

### License
This project does not currently declare a license. Consider adding one if you plan to distribute.
